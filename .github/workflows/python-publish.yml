name: Upload Python Package

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: '0.0.0'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Version from input
        if: github.event_name != 'push'
        run: |
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "TAG_NAME=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
      - name: Version from pushed tag
        if: github.event_name == 'push'
        run: |
          # from refs/tags/v1.2.3 get 1.2.3
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "version=${TAG_NAME}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
      - name: Autobump version
        run: |
          PLACEHOLDER="__version__ = '0.0.0dev'"
          REPLACEMENT="__version__ = '${{ env.version }}'"
          VERSION_FILE="weconnect/__version.py"
          # ensure the placeholder is there. If grep doesn't find the placeholder
          # it exits with exit code 1 and github actions aborts the build.
          grep "$PLACEHOLDER" "$VERSION_FILE"
          sed -i "s/$PLACEHOLDER/$REPLACEMENT/g" "$VERSION_FILE"
          grep "$REPLACEMENT" "$VERSION_FILE"
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
      - name: List dist directory
        run: |
          ls -la dist
      - name: Upload Release Asset (Wheel)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/weconnect-${{ env.version }}-*.whl
          asset_name: weconnect-${{ env.version }}.whl
          asset_content_type: application/zip
      - name: Upload Release Asset (Source)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/weconnect-${{ env.version }}.tar.gz
          asset_name: weconnect-${{ env.version }}.tar.gz
          asset_content_type: application/gzip
